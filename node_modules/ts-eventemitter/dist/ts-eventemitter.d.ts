declare module 'ts-eventemitter/ts-eventemitter' {
	/// <reference path="../typings/node/node.d.ts" />
	export interface TsEventEmitter {
	    event(name: string): EventBase<TsEventEmitter>;
	    removeAllListeners(): void;
	    setMaxListeners(n: number): void;
	}
	export module TsEventEmitter {
	    function create(): TsEventEmitter;
	}
	export interface EventBase<E extends TsEventEmitter> {
	}
	export interface Event0<E extends TsEventEmitter> extends EventBase<E> {
	    on(listener: () => any): E;
	    addListener(listener: () => any): E;
	    off(listener: () => any): E;
	    removeListener(listener: () => any): E;
	    removeAllListeners(): E;
	    listeners(): {
	        (): any;
	    }[];
	    once(listener: () => any): E;
	    emit(): boolean;
	}
	export interface Event1<E extends TsEventEmitter, T1> extends EventBase<E> {
	    on(listener: (arg1: T1) => any): E;
	    addListener(listener: (arg1: T1) => any): E;
	    off(listener: (arg1: T1) => any): E;
	    removeListener(listener: (arg1: T1) => any): E;
	    removeAllListeners(): E;
	    listeners(): {
	        (arg1: T1): any;
	    }[];
	    once(listener: (arg1: T1) => any): E;
	    emit(arg1: T1): boolean;
	}
	export interface Event2<E extends TsEventEmitter, T1, T2> extends EventBase<E> {
	    on(listener: (arg1: T1, arg2: T2) => any): E;
	    addListener(listener: (arg1: T1, arg2: T2) => any): E;
	    off(listener: (arg1: T1, arg2: T2) => any): E;
	    removeListener(listener: (arg1: T1, arg2: T2) => any): E;
	    removeAllListeners(): E;
	    listeners(): {
	        (arg1: T1, arg2: T2): any;
	    }[];
	    once(listener: (arg1: T1, arg2: T2) => any): E;
	    emit(arg1: T1, arg2: T2): boolean;
	}

}
declare module 'ts-eventemitter' {
	import main = require('ts-eventemitter/ts-eventemitter');
	export = main;
}
